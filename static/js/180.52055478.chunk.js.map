{"version":3,"file":"static/js/180.52055478.chunk.js","mappings":"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","sources":["redux/selectors.js","components/Loader/Loader.styled.js","components/Loader/Loader.js","components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.js","components/ContactList/ContactListItem.styled.js","components/ContactList/ContactListItem.js","components/ContactList/ContactList.js","components/Filter/Filter.styled.js","components/Filter/Filter.js","pages/Contacts.js"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectFilter = state => state.filter.value;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, value) => {\n    return contacts.filter(contact =>\n      contact.name.toLocaleLowerCase().includes(value.toLocaleLowerCase())\n    );\n  }\n);\n","import styled from 'styled-components';\n\nexport const SpinnerWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n`;\n","import { Oval } from 'react-loader-spinner';\nimport { SpinnerWrapper } from './Loader.styled';\n\nexport const Loader = () => (\n  <SpinnerWrapper>\n    <Oval\n      height={14}\n      width={14}\n      color=\"#000000\"\n      visible={true}\n      ariaLabel=\"oval-loading\"\n      secondaryColor=\"#979191\"\n      strokeWidth={2}\n      strokeWidthSecondary={2}\n    />\n  </SpinnerWrapper>\n);\n","import styled from 'styled-components';\n\nexport const FormStyled = styled.form`\n  display: flex;\n  flex-direction: column;\n  padding: 15px;\n  border: 2px solid #000;\n`;\n\nexport const LabelStyled = styled.label`\n  margin-bottom: 10px;\n`;\n\nexport const InputStyled = styled.input`\n  width: 60%;\n  height: 30px;\n  margin-bottom: 20px;\n\n  &:focus,\n  &:hover {\n    border: 2px solid #408dadb5;\n    border-radius: 2px;\n    outline: 2px solid #46add9a7;\n  }\n`;\n\nexport const BtnStyled = styled.button`\n  width: 100px;\n  height: 25px;\n  font-size: 14px;\n  border-radius: 4px;\n  border: 0.5px solid #000;\n  background-color: transparent;\n  transition-property: background-color, box-shadow;\n  transition-duration: 250ms;\n  transition-timing-function: linear;\n  cursor: pointer;\n\n  &:hover,\n  &:focus {\n    background-color: #408dadb5;\n    border-color: transparent;\n    box-shadow: 0 5px 5px rgb(0 0 0 / 20%);\n  }\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { useState } from 'react';\nimport { addContact } from 'redux/operations';\nimport { selectContacts, selectIsLoading } from 'redux/selectors';\nimport { Loader } from 'components/Loader/Loader';\nimport { nanoid } from 'nanoid';\nimport toast from 'react-hot-toast';\nimport {\n  FormStyled,\n  LabelStyled,\n  InputStyled,\n  BtnStyled,\n} from './ContactForm.styled';\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const isLoading = useSelector(selectIsLoading);\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const nameInputId = nanoid();\n  const numberInputId = nanoid();\n\n  const handleChange = evt => {\n    const { name, value } = evt.currentTarget;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n\n    if (\n      contacts.some(\n        contact => contact.name.toLowerCase() === name.trim().toLowerCase()\n      )\n    )\n      return toast.error(`${name} is already in contacts.`);\n\n    if (contacts.some(contact => contact.number === number.trim()))\n      return toast.error(`${number} is already in contacts.`);\n\n    const contact = { name, number };\n    dispatch(addContact(contact))\n      .unwrap()\n      .then(() => {\n        toast.success('Contact added!');\n        reset();\n      })\n      .catch(() =>\n        toast.error('Something went wrong...Try reloading the page')\n      );\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <FormStyled onSubmit={handleSubmit}>\n      <LabelStyled htmlFor={nameInputId}>Name</LabelStyled>\n      <InputStyled\n        type=\"text\"\n        name=\"name\"\n        id={nameInputId}\n        value={name}\n        onChange={handleChange}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n      />\n      <LabelStyled htmlFor={numberInputId}>Number</LabelStyled>\n      <InputStyled\n        type=\"tel\"\n        name=\"number\"\n        id={numberInputId}\n        value={number}\n        onChange={handleChange}\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required\n      />\n      <BtnStyled type=\"submit\" disabled={isLoading}>\n        {isLoading ? <Loader /> : 'Add contact'}\n      </BtnStyled>\n    </FormStyled>\n  );\n};\n","import styled from 'styled-components';\n\nexport const ContactItem = styled.li`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n\n  &:not(:last-child) {\n    margin-bottom: 10px;\n  }\n`;\n\nexport const TextWrap = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nexport const ContactMarker = styled.span`\n  width: 5px;\n  height: 5px;\n  background-color: #000;\n  border-radius: 50%;\n`;\n\nexport const ContactText = styled.p`\n  width: 400px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-left: 7px;\n  font-size: 18px;\n  font-weight: 500;\n`;\n\nexport const BtnDelete = styled.button`\n  width: 100px;\n  font-size: 14px;\n  border-radius: 4px;\n  border: 0.5px solid #000;\n  background-color: transparent;\n  transition-property: background-color, box-shadow;\n  transition-duration: 250ms;\n  transition-timing-function: linear;\n  cursor: pointer;\n\n  &:hover,\n  &:focus {\n    background-color: #408dadb5;\n    border-color: transparent;\n    box-shadow: 0 5px 5px rgb(0 0 0 / 20%);\n  }\n`;\n","import { useDispatch } from 'react-redux';\nimport { useState } from 'react';\nimport { deleteContact } from 'redux/operations';\nimport { Loader } from 'components/Loader/Loader';\nimport toast from 'react-hot-toast';\nimport PropTypes from 'prop-types';\nimport {\n  ContactItem,\n  BtnDelete,\n  TextWrap,\n  ContactText,\n  ContactMarker,\n} from './ContactListItem.styled';\n\nexport const ContactListItem = ({ contact: { id, name, number } }) => {\n  const [isDeleting, setIsDeleting] = useState(false);\n  const dispatch = useDispatch();\n\n  const handleOnDelete = () => {\n    setIsDeleting(true);\n    dispatch(deleteContact(id))\n      .unwrap()\n      .then(() => {\n        toast.success('Contact deleted!');\n        setIsDeleting(false);\n      })\n      .catch(() =>\n        toast.error('Something went wrong...Try reloading the page')\n      );\n  };\n\n  return (\n    <ContactItem>\n      <TextWrap>\n        <ContactMarker></ContactMarker>\n        <ContactText>\n          <span>{name}:</span> <span>{number}</span>\n        </ContactText>\n      </TextWrap>\n      <BtnDelete type=\"button\" onClick={handleOnDelete} disabled={isDeleting}>\n        {isDeleting ? <Loader /> : 'Delete'}\n      </BtnDelete>\n    </ContactItem>\n  );\n};\n\nContactListItem.propTypes = {\n  contact: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }).isRequired,\n};\n","import { useSelector } from 'react-redux';\nimport { ContactListItem } from './ContactListItem';\nimport { selectVisibleContacts } from 'redux/selectors';\n\nexport const ContactList = () => {\n  const visibleContacts = useSelector(selectVisibleContacts);\n\n  return (\n    <ul>\n      {visibleContacts.map(contact => (\n        <ContactListItem key={contact.id} contact={contact} />\n      ))}\n    </ul>\n  );\n};\n","import styled from 'styled-components';\n\nexport const InputFilter = styled.input`\n  display: block;\n  margin-top: 10px;\n\n  &:focus,\n  &:hover {\n    border: 2px solid #408dadb5;\n    border-radius: 2px;\n    outline: 2px solid #46add9a7;\n  }\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { selectFilter } from 'redux/selectors';\nimport { setFilter } from 'redux/filterSlice';\nimport { InputFilter } from './Filter.styled';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const value = useSelector(selectFilter);\n\n  const changeFilter = evt => {\n    dispatch(setFilter(evt.currentTarget.value.trim()));\n  };\n\n  return (\n    <>\n      <label>\n        Find contacts by name\n        <InputFilter\n          type=\"text\"\n          value={value}\n          onChange={changeFilter}\n        ></InputFilter>\n      </label>\n    </>\n  );\n};\n","import { useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport { fetchContacts } from 'redux/operations';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\nimport { Helmet } from 'react-helmet';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div>\n      <Helmet>\n        <title>Your contacts</title>\n      </Helmet>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </div>\n  );\n}\n\n// <h1>Phonebook</h1>\n// <ContactForm />\n// <h2>Contacts</h2>\n// <Filter />\n// {isLoading && !error && <b>Request in progress...</b>}\n// {error && (\n//   <div style={{ margin: '10px auto' }}>\n//     Something went wrong... Try reloading the page\n//   </div>\n// )}\n// {contacts.length > 0 && <ContactList />}\n"],"names":["selectContacts","state","contacts","items","selectFilter","filter","value","selectIsLoading","isLoading","selectVisibleContacts","createSelector","contact","name","toLocaleLowerCase","includes","SpinnerWrapper","styled","Loader","height","width","color","visible","ariaLabel","secondaryColor","strokeWidth","strokeWidthSecondary","FormStyled","LabelStyled","InputStyled","BtnStyled","ContactForm","dispatch","useDispatch","useSelector","useState","setName","number","setNumber","nameInputId","nanoid","numberInputId","handleChange","evt","currentTarget","reset","onSubmit","preventDefault","some","toLowerCase","trim","toast","addContact","unwrap","then","catch","htmlFor","type","id","onChange","pattern","title","required","disabled","ContactItem","TextWrap","ContactMarker","ContactText","BtnDelete","ContactListItem","isDeleting","setIsDeleting","onClick","deleteContact","ContactList","visibleContacts","map","InputFilter","Filter","setFilter","Contacts","useEffect","fetchContacts","Helmet"],"sourceRoot":""}